#define LAYOUT_US_ENGLISH

#include <HID-Project.h>
#include <HID-Settings.h>

#include <Bounce2.h>
#include <Wire.h>
//#include <Encoder.h>

#define SDA_PIN             2
#define SCI_PIN             3
#define ROW1                4
#define ROW2                5
#define ROW3                6
#define ROW4                7
#define ROW5                8
#define COL1                9
#define COL2                10
#define COL3                16
#define COL4                14
#define COL5                15
#define COL6                18
#define COL7                19
#define ENCODER_PIN_A       20
#define ENCODER_PIN_B       21

#define SLAVE_ADDRESS       0x1
#define MASTER_ADDRESS      0x2

#define ROW                 5
#define COL                 7

#define BUFFER_SIZE         10

struct KeyPressReport {
  KeyboardKeycode keysPressed[BUFFER_SIZE];
  KeyboardKeycode keysReleased[BUFFER_SIZE];
};

KeyPressReport outgoingReport;

char incomingReport[BUFFER_SIZE];

const int cols[] = {COL1, COL2, COL3, COL4, COL5, COL6, COL7};
const int rows[] = {ROW1, ROW2, ROW3, ROW4, ROW5};

#define DEBOUNCE_DELAY      3
#define ENCODER_THRESHOLD   1

Bounce debouncers[ROW][COL];

const KeyboardKeycode QWERTY[ROW][COL] = {
  {KEY_TILDE,           KEY_1,              KEY_2,              KEY_3,                  KEY_4,              KEY_5,          KEY_0},
  {KEY_TAB,             KEY_Q,              KEY_W,              KEY_E,                  KEY_R,              KEY_T,          KEY_0},
  {KEY_ESC,             KEY_A,              KEY_S,              KEY_D,                  KEY_F,              KEY_G,          KEY_0},
  {KEY_LEFT_SHIFT,      KEY_Z,              KEY_X,              KEY_C,                  KEY_V,              KEY_B,          KEY_0},
  {KEY_LEFT_CTRL,       KEY_LEFT_GUI,       KEY_LEFT_BRACE,     KEY_RIGHT_BRACE,        KEY_LEFT_ALT,       KEY_SPACE,     KEY_QUOTE}
};

const KeyboardKeycode COLEMAK[ROW][COL] = {
  {KEY_TILDE,           KEY_1,              KEY_2,              KEY_3,                  KEY_4,              KEY_5,          KEY_0},
  {KEY_TAB,             KEY_Q,              KEY_W,              KEY_F,                  KEY_P,              KEY_G,          KEY_0},
  {KEY_ESC,             KEY_A,              KEY_R,              KEY_S,                  KEY_T,              KEY_D,          KEY_0},
  {KEY_LEFT_SHIFT,      KEY_Z,              KEY_X,              KEY_C,                  KEY_V,              KEY_B,          KEY_0},
  {KEY_LEFT_CTRL,       KEY_LEFT_GUI,       KEY_LEFT_BRACE,     KEY_RIGHT_BRACE,        KEY_LEFT_ALT,       KEY_SPACE,      KEY_QUOTE}
};

const KeyboardKeycode LAYER2[ROW][COL] = {
  {DUMMY_KEY,            KEY_F1,              KEY_F2,                 KEY_F3,                  KEY_F4,                 KEY_F5,                   DUMMY_KEY},
  {DUMMY_KEY,            DUMMY_KEY,           DUMMY_KEY,              DUMMY_KEY,               DUMMY_KEY,              DUMMY_KEY,                DUMMY_KEY},
  {KEY_CAPS_LOCK,        DUMMY_KEY,           DUMMY_KEY,              DUMMY_KEY,               DUMMY_KEY,              DUMMY_KEY,                DUMMY_KEY},
  {KEY_RIGHT_SHIFT,      DUMMY_KEY,           DUMMY_KEY,              DUMMY_KEY,               DUMMY_KEY,              DUMMY_KEY,                DUMMY_KEY},
  {DUMMY_KEY,            DUMMY_KEY,           DUMMY_KEY,              DUMMY_KEY,               KEY_LEFT_ALT,           DUMMY_KEY,                DUMMY_KEY}
};

KeyboardKeycode keys[ROW][COL];

//Encoder myEnc(ENCODER_PIN_A, ENCODER_PIN_B);
//long oldPosition = -999;

bool layer_type = false;
bool keyboard_type = false;

void switch_keyboard() {

  for(size_t i = 0; i < ROW; i++) {
    for(size_t j = 0; j < COL; j++) {
      if (keyboard_type) keys[i][j] = QWERTY[i][j];
      else keys[i][j] = COLEMAK[i][j];
    }
  }
  keyboard_type = !keyboard_type;
}

void switch_layer() {

  for(size_t i = 0; i < ROW; i++) {
    for(size_t j = 0; j < COL; j++) {
      if (!layer_type) keys[i][j] = LAYER2[i][j];
      else if (keyboard_type) 
        keys[i][j] = COLEMAK[i][j];
      else if (!keyboard_type)
        keys[i][j] = QWERTY[i][j];
    }
  }

  layer_type = !layer_type;
}

void clearOutgoingReport() {
  for (size_t i = 0; i < BUFFER_SIZE; i++) {
    outgoingReport.keysPressed[i] = DUMMY_KEY;
    outgoingReport.keysReleased[i] = DUMMY_KEY;
  }
}

void scan_matrix(){
  int index_pressed = 0;
  int index_released = 0;

  for (int col = 0; col < COL; col++) {
    digitalWrite(cols[col], LOW);

    for (int row = 0; row < ROW; row++) {
      debouncers[row][col].update();

      // Handle Keys
      if (debouncers[row][col].fell() && index_pressed < BUFFER_SIZE) {

        outgoingReport.keysPressed[index_pressed++] = keys[row][col];
      }

      if (debouncers[row][col].rose() && index_released < BUFFER_SIZE) {
        outgoingReport.keysReleased[index_released++] = keys[row][col];
      }

    }
    digitalWrite(cols[col], HIGH);
  }

  outgoingReport.keysPressed[index_pressed] = DUMMY_KEY;
  outgoingReport.keysReleased[index_released] = DUMMY_KEY;
}

void requestSlaveReport() {

  Wire.requestFrom(SLAVE_ADDRESS, BUFFER_SIZE);

  if (Wire.available()) {
    Wire.readBytes((char*)&incomingReport, BUFFER_SIZE);
    for (size_t i = 0; i < BUFFER_SIZE; i++) {
      if (incomingReport[i] == '\0') break;
      if (incomingReport[i] == 'S') switch_keyboard();
      if (incomingReport[i] == 'F') switch_layer();
    }
  }

}

void scan_slave() {
  Wire.beginTransmission(SLAVE_ADDRESS);
  Wire.write((char*)&outgoingReport, sizeof(KeyPressReport));
  Wire.endTransmission();
}

void setup() {
  // Initialize column pins as OUTPUT and set them HIGH
  for (int i = 0; i < COL; i++) {
    pinMode(cols[i], OUTPUT);
    digitalWrite(cols[i], HIGH);
  }

  // Initialize row pins as INPUT_PULLUP and setup the debouncers
  for (int row = 0; row < ROW; row++) {
    pinMode(rows[row], INPUT_PULLUP);

    for (int col = 0; col < COL; col++) {
      debouncers[row][col].attach(rows[row]);
      debouncers[row][col].interval(DEBOUNCE_DELAY);
    }
  }

  pinMode(SDA_PIN, INPUT_PULLUP);
  pinMode(SCI_PIN, INPUT_PULLUP);

  pinMode(ENCODER_PIN_A, INPUT_PULLUP);
  pinMode(ENCODER_PIN_B, INPUT_PULLUP);

  switch_keyboard();
  clearOutgoingReport();

  Serial.begin(9600);
  Wire.begin();
}

void loop() {
  scan_matrix();
  scan_slave();
  delayMicroseconds(450);
  clearOutgoingReport();
  requestSlaveReport();
  delayMicroseconds(300);
}
